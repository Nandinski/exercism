<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="309.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="1801685745"><g><title>_dl_relocate_object (381,133 samples, 0.02%)</title><rect x="0.0095%" y="165" width="0.0212%" height="15" fill="rgb(227,0,7)" fg:x="170876" fg:w="381133"/><text x="0.2595%" y="175.50"></text></g><g><title>elf_dynamic_do_Rela (381,133 samples, 0.02%)</title><rect x="0.0095%" y="149" width="0.0212%" height="15" fill="rgb(217,0,24)" fg:x="170876" fg:w="381133"/><text x="0.2595%" y="159.50"></text></g><g><title>elf_machine_rela (381,133 samples, 0.02%)</title><rect x="0.0095%" y="133" width="0.0212%" height="15" fill="rgb(221,193,54)" fg:x="170876" fg:w="381133"/><text x="0.2595%" y="143.50"></text></g><g><title>resolve_map (381,133 samples, 0.02%)</title><rect x="0.0095%" y="117" width="0.0212%" height="15" fill="rgb(248,212,6)" fg:x="170876" fg:w="381133"/><text x="0.2595%" y="127.50"></text></g><g><title>_dl_lookup_symbol_x (381,133 samples, 0.02%)</title><rect x="0.0095%" y="101" width="0.0212%" height="15" fill="rgb(208,68,35)" fg:x="170876" fg:w="381133"/><text x="0.2595%" y="111.50"></text></g><g><title>do_lookup_x (381,133 samples, 0.02%)</title><rect x="0.0095%" y="85" width="0.0212%" height="15" fill="rgb(232,128,0)" fg:x="170876" fg:w="381133"/><text x="0.2595%" y="95.50"></text></g><g><title>check_match (381,133 samples, 0.02%)</title><rect x="0.0095%" y="69" width="0.0212%" height="15" fill="rgb(207,160,47)" fg:x="170876" fg:w="381133"/><text x="0.2595%" y="79.50"></text></g><g><title>_dl_start_final (436,435 samples, 0.02%)</title><rect x="0.0092%" y="213" width="0.0242%" height="15" fill="rgb(228,23,34)" fg:x="165620" fg:w="436435"/><text x="0.2592%" y="223.50"></text></g><g><title>_dl_sysdep_start (436,435 samples, 0.02%)</title><rect x="0.0092%" y="197" width="0.0242%" height="15" fill="rgb(218,30,26)" fg:x="165620" fg:w="436435"/><text x="0.2592%" y="207.50"></text></g><g><title>dl_main (431,179 samples, 0.02%)</title><rect x="0.0095%" y="181" width="0.0239%" height="15" fill="rgb(220,122,19)" fg:x="170876" fg:w="431179"/><text x="0.2595%" y="191.50"></text></g><g><title>_start (602,071 samples, 0.03%)</title><rect x="0.0000%" y="245" width="0.0334%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="602071"/><text x="0.2500%" y="255.50"></text></g><g><title>_dl_start (436,976 samples, 0.02%)</title><rect x="0.0092%" y="229" width="0.0243%" height="15" fill="rgb(240,193,28)" fg:x="165105" fg:w="436976"/><text x="0.2592%" y="239.50"></text></g><g><title>alphametics-e72 (704,054 samples, 0.04%)</title><rect x="0.0000%" y="261" width="0.0391%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="704054"/><text x="0.2500%" y="271.50"></text></g><g><title>__GI___libc_malloc (30,883,396 samples, 1.71%)</title><rect x="13.2797%" y="69" width="1.7141%" height="15" fill="rgb(206,188,39)" fg:x="239257895" fg:w="30883396"/><text x="13.5297%" y="79.50"></text></g><g><title>tcache_get (11,971,546 samples, 0.66%)</title><rect x="14.3293%" y="53" width="0.6645%" height="15" fill="rgb(217,207,13)" fg:x="258169745" fg:w="11971546"/><text x="14.5793%" y="63.50"></text></g><g><title>tcache_get_n (11,971,546 samples, 0.66%)</title><rect x="14.3293%" y="37" width="0.6645%" height="15" fill="rgb(231,73,38)" fg:x="258169745" fg:w="11971546"/><text x="14.5793%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (103,650,317 samples, 5.75%)</title><rect x="9.6820%" y="85" width="5.7530%" height="15" fill="rgb(225,20,46)" fg:x="174438417" fg:w="103650317"/><text x="9.9320%" y="95.50">&lt;alloc:..</text></g><g><title>__rust_alloc (7,947,443 samples, 0.44%)</title><rect x="14.9938%" y="69" width="0.4411%" height="15" fill="rgb(210,31,41)" fg:x="270141291" fg:w="7947443"/><text x="15.2438%" y="79.50"></text></g><g><title>&lt;itertools::permutations::Permutations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (170,315,395 samples, 9.45%)</title><rect x="8.3656%" y="101" width="9.4531%" height="15" fill="rgb(221,200,47)" fg:x="150722570" fg:w="170315395"/><text x="8.6156%" y="111.50">&lt;itertools::pe..</text></g><g><title>itertools::permutations::advance (42,949,231 samples, 2.38%)</title><rect x="15.4349%" y="85" width="2.3838%" height="15" fill="rgb(226,26,5)" fg:x="278088734" fg:w="42949231"/><text x="15.6849%" y="95.50">it..</text></g><g><title>_int_free (4,066,135 samples, 0.23%)</title><rect x="18.4457%" y="85" width="0.2257%" height="15" fill="rgb(249,33,26)" fg:x="332333368" fg:w="4066135"/><text x="18.6957%" y="95.50"></text></g><g><title>tcache_put (3,910,328 samples, 0.22%)</title><rect x="18.4543%" y="69" width="0.2170%" height="15" fill="rgb(235,183,28)" fg:x="332489175" fg:w="3910328"/><text x="18.7043%" y="79.50"></text></g><g><title>__GI___libc_free (19,326,903 samples, 1.07%)</title><rect x="17.8188%" y="101" width="1.0727%" height="15" fill="rgb(221,5,38)" fg:x="321037965" fg:w="19326903"/><text x="18.0688%" y="111.50"></text></g><g><title>arena_for_chunk (3,965,365 samples, 0.22%)</title><rect x="18.6714%" y="85" width="0.2201%" height="15" fill="rgb(247,18,42)" fg:x="336399503" fg:w="3965365"/><text x="18.9214%" y="95.50"></text></g><g><title>arena_for_chunk (3,965,365 samples, 0.22%)</title><rect x="18.6714%" y="69" width="0.2201%" height="15" fill="rgb(241,131,45)" fg:x="336399503" fg:w="3965365"/><text x="18.9214%" y="79.50"></text></g><g><title>heap_for_ptr (3,965,365 samples, 0.22%)</title><rect x="18.6714%" y="53" width="0.2201%" height="15" fill="rgb(249,31,29)" fg:x="336399503" fg:w="3965365"/><text x="18.9214%" y="63.50"></text></g><g><title>__rdl_dealloc (7,645,251 samples, 0.42%)</title><rect x="18.8915%" y="101" width="0.4243%" height="15" fill="rgb(225,111,53)" fg:x="340364868" fg:w="7645251"/><text x="19.1415%" y="111.50"></text></g><g><title>puzzle_with_eig (474,400,131 samples, 26.33%)</title><rect x="0.0391%" y="261" width="26.3309%" height="15" fill="rgb(238,160,17)" fg:x="704054" fg:w="474400131"/><text x="0.2891%" y="271.50">puzzle_with_eig</text></g><g><title>clone3 (474,400,131 samples, 26.33%)</title><rect x="0.0391%" y="245" width="26.3309%" height="15" fill="rgb(214,148,48)" fg:x="704054" fg:w="474400131"/><text x="0.2891%" y="255.50">clone3</text></g><g><title>start_thread (474,400,131 samples, 26.33%)</title><rect x="0.0391%" y="229" width="26.3309%" height="15" fill="rgb(232,36,49)" fg:x="704054" fg:w="474400131"/><text x="0.2891%" y="239.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (474,400,131 samples, 26.33%)</title><rect x="0.0391%" y="213" width="26.3309%" height="15" fill="rgb(209,103,24)" fg:x="704054" fg:w="474400131"/><text x="0.2891%" y="223.50">std::sys::pal::unix::thread::Thread::new::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (474,400,131 samples, 26.33%)</title><rect x="0.0391%" y="197" width="26.3309%" height="15" fill="rgb(229,88,8)" fg:x="704054" fg:w="474400131"/><text x="0.2891%" y="207.50">core::ops::function::FnOnce::call_once{{vt..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (474,400,131 samples, 26.33%)</title><rect x="0.0391%" y="181" width="26.3309%" height="15" fill="rgb(213,181,19)" fg:x="704054" fg:w="474400131"/><text x="0.2891%" y="191.50">std::sys::backtrace::__rust_begin_short_ba..</text></g><g><title>test::run_test::_{{closure}} (474,378,368 samples, 26.33%)</title><rect x="0.0403%" y="165" width="26.3297%" height="15" fill="rgb(254,191,54)" fg:x="725817" fg:w="474378368"/><text x="0.2903%" y="175.50">test::run_test::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (474,378,368 samples, 26.33%)</title><rect x="0.0403%" y="149" width="26.3297%" height="15" fill="rgb(241,83,37)" fg:x="725817" fg:w="474378368"/><text x="0.2903%" y="159.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (474,378,368 samples, 26.33%)</title><rect x="0.0403%" y="133" width="26.3297%" height="15" fill="rgb(233,36,39)" fg:x="725817" fg:w="474378368"/><text x="0.2903%" y="143.50">core::ops::function::FnOnce::call_once</text></g><g><title>alphametics::solve (474,378,368 samples, 26.33%)</title><rect x="0.0403%" y="117" width="26.3297%" height="15" fill="rgb(226,3,54)" fg:x="725817" fg:w="474378368"/><text x="0.2903%" y="127.50">alphametics::solve</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (127,094,066 samples, 7.05%)</title><rect x="19.3158%" y="101" width="7.0542%" height="15" fill="rgb(245,192,40)" fg:x="348010119" fg:w="127094066"/><text x="19.5658%" y="111.50">hashbrown..</text></g><g><title>puzzle_with_fou (550,114 samples, 0.03%)</title><rect x="26.3700%" y="261" width="0.0305%" height="15" fill="rgb(238,167,29)" fg:x="475104185" fg:w="550114"/><text x="26.6200%" y="271.50"></text></g><g><title>clone3 (550,114 samples, 0.03%)</title><rect x="26.3700%" y="245" width="0.0305%" height="15" fill="rgb(232,182,51)" fg:x="475104185" fg:w="550114"/><text x="26.6200%" y="255.50"></text></g><g><title>start_thread (550,114 samples, 0.03%)</title><rect x="26.3700%" y="229" width="0.0305%" height="15" fill="rgb(231,60,39)" fg:x="475104185" fg:w="550114"/><text x="26.6200%" y="239.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (550,114 samples, 0.03%)</title><rect x="26.3700%" y="213" width="0.0305%" height="15" fill="rgb(208,69,12)" fg:x="475104185" fg:w="550114"/><text x="26.6200%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (550,114 samples, 0.03%)</title><rect x="26.3700%" y="197" width="0.0305%" height="15" fill="rgb(235,93,37)" fg:x="475104185" fg:w="550114"/><text x="26.6200%" y="207.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (550,114 samples, 0.03%)</title><rect x="26.3700%" y="181" width="0.0305%" height="15" fill="rgb(213,116,39)" fg:x="475104185" fg:w="550114"/><text x="26.6200%" y="191.50"></text></g><g><title>test::run_test::_{{closure}} (550,114 samples, 0.03%)</title><rect x="26.3700%" y="165" width="0.0305%" height="15" fill="rgb(222,207,29)" fg:x="475104185" fg:w="550114"/><text x="26.6200%" y="175.50"></text></g><g><title>test::__rust_begin_short_backtrace (550,114 samples, 0.03%)</title><rect x="26.3700%" y="149" width="0.0305%" height="15" fill="rgb(206,96,30)" fg:x="475104185" fg:w="550114"/><text x="26.6200%" y="159.50"></text></g><g><title>core::ops::function::FnOnce::call_once (550,114 samples, 0.03%)</title><rect x="26.3700%" y="133" width="0.0305%" height="15" fill="rgb(218,138,4)" fg:x="475104185" fg:w="550114"/><text x="26.6200%" y="143.50"></text></g><g><title>alphametics::solve (550,114 samples, 0.03%)</title><rect x="26.3700%" y="117" width="0.0305%" height="15" fill="rgb(250,191,14)" fg:x="475104185" fg:w="550114"/><text x="26.6200%" y="127.50"></text></g><g><title>&lt;itertools::permutations::Permutations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (526,280 samples, 0.03%)</title><rect x="26.3713%" y="101" width="0.0292%" height="15" fill="rgb(239,60,40)" fg:x="475128019" fg:w="526280"/><text x="26.6213%" y="111.50"></text></g><g><title>itertools::permutations::advance (315,093 samples, 0.02%)</title><rect x="26.3830%" y="85" width="0.0175%" height="15" fill="rgb(206,27,48)" fg:x="475339206" fg:w="315093"/><text x="26.6330%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21,195,248 samples, 1.18%)</title><rect x="27.2273%" y="85" width="1.1764%" height="15" fill="rgb(225,35,8)" fg:x="490550492" fg:w="21195248"/><text x="27.4773%" y="95.50"></text></g><g><title>__GI___libc_malloc (7,882,132 samples, 0.44%)</title><rect x="27.9662%" y="69" width="0.4375%" height="15" fill="rgb(250,213,24)" fg:x="503863608" fg:w="7882132"/><text x="28.2162%" y="79.50"></text></g><g><title>tcache_get (2,897,127 samples, 0.16%)</title><rect x="28.2429%" y="53" width="0.1608%" height="15" fill="rgb(247,123,22)" fg:x="508848613" fg:w="2897127"/><text x="28.4929%" y="63.50"></text></g><g><title>tcache_get_n (2,897,127 samples, 0.16%)</title><rect x="28.2429%" y="37" width="0.1608%" height="15" fill="rgb(231,138,38)" fg:x="508848613" fg:w="2897127"/><text x="28.4929%" y="47.50"></text></g><g><title>&lt;itertools::permutations::Permutations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (31,276,921 samples, 1.74%)</title><rect x="26.8324%" y="101" width="1.7360%" height="15" fill="rgb(231,145,46)" fg:x="483434766" fg:w="31276921"/><text x="27.0824%" y="111.50"></text></g><g><title>itertools::permutations::advance (2,965,947 samples, 0.16%)</title><rect x="28.4037%" y="85" width="0.1646%" height="15" fill="rgb(251,118,11)" fg:x="511745740" fg:w="2965947"/><text x="28.6537%" y="95.50"></text></g><g><title>__rust_dealloc (2,606,459 samples, 0.14%)</title><rect x="28.5683%" y="101" width="0.1447%" height="15" fill="rgb(217,147,25)" fg:x="514711687" fg:w="2606459"/><text x="28.8183%" y="111.50"></text></g><g><title>puzzle_with_sev (67,390,592 samples, 3.74%)</title><rect x="26.4005%" y="261" width="3.7404%" height="15" fill="rgb(247,81,37)" fg:x="475654299" fg:w="67390592"/><text x="26.6505%" y="271.50">puzz..</text></g><g><title>clone3 (67,390,592 samples, 3.74%)</title><rect x="26.4005%" y="245" width="3.7404%" height="15" fill="rgb(209,12,38)" fg:x="475654299" fg:w="67390592"/><text x="26.6505%" y="255.50">clon..</text></g><g><title>start_thread (67,390,592 samples, 3.74%)</title><rect x="26.4005%" y="229" width="3.7404%" height="15" fill="rgb(227,1,9)" fg:x="475654299" fg:w="67390592"/><text x="26.6505%" y="239.50">star..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (67,390,592 samples, 3.74%)</title><rect x="26.4005%" y="213" width="3.7404%" height="15" fill="rgb(248,47,43)" fg:x="475654299" fg:w="67390592"/><text x="26.6505%" y="223.50">std:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (67,390,592 samples, 3.74%)</title><rect x="26.4005%" y="197" width="3.7404%" height="15" fill="rgb(221,10,30)" fg:x="475654299" fg:w="67390592"/><text x="26.6505%" y="207.50">core..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (67,390,592 samples, 3.74%)</title><rect x="26.4005%" y="181" width="3.7404%" height="15" fill="rgb(210,229,1)" fg:x="475654299" fg:w="67390592"/><text x="26.6505%" y="191.50">std:..</text></g><g><title>test::run_test::_{{closure}} (67,390,592 samples, 3.74%)</title><rect x="26.4005%" y="165" width="3.7404%" height="15" fill="rgb(222,148,37)" fg:x="475654299" fg:w="67390592"/><text x="26.6505%" y="175.50">test..</text></g><g><title>test::__rust_begin_short_backtrace (67,390,592 samples, 3.74%)</title><rect x="26.4005%" y="149" width="3.7404%" height="15" fill="rgb(234,67,33)" fg:x="475654299" fg:w="67390592"/><text x="26.6505%" y="159.50">test..</text></g><g><title>core::ops::function::FnOnce::call_once (67,390,592 samples, 3.74%)</title><rect x="26.4005%" y="133" width="3.7404%" height="15" fill="rgb(247,98,35)" fg:x="475654299" fg:w="67390592"/><text x="26.6505%" y="143.50">core..</text></g><g><title>alphametics::solve (67,390,592 samples, 3.74%)</title><rect x="26.4005%" y="117" width="3.7404%" height="15" fill="rgb(247,138,52)" fg:x="475654299" fg:w="67390592"/><text x="26.6505%" y="127.50">alph..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (25,726,745 samples, 1.43%)</title><rect x="28.7130%" y="101" width="1.4279%" height="15" fill="rgb(213,79,30)" fg:x="517318146" fg:w="25726745"/><text x="28.9630%" y="111.50"></text></g><g><title>puzzle_with_six (18,964,379 samples, 1.05%)</title><rect x="30.1409%" y="261" width="1.0526%" height="15" fill="rgb(246,177,23)" fg:x="543044891" fg:w="18964379"/><text x="30.3909%" y="271.50"></text></g><g><title>clone3 (18,964,379 samples, 1.05%)</title><rect x="30.1409%" y="245" width="1.0526%" height="15" fill="rgb(230,62,27)" fg:x="543044891" fg:w="18964379"/><text x="30.3909%" y="255.50"></text></g><g><title>start_thread (18,964,379 samples, 1.05%)</title><rect x="30.1409%" y="229" width="1.0526%" height="15" fill="rgb(216,154,8)" fg:x="543044891" fg:w="18964379"/><text x="30.3909%" y="239.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (18,964,379 samples, 1.05%)</title><rect x="30.1409%" y="213" width="1.0526%" height="15" fill="rgb(244,35,45)" fg:x="543044891" fg:w="18964379"/><text x="30.3909%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (18,964,379 samples, 1.05%)</title><rect x="30.1409%" y="197" width="1.0526%" height="15" fill="rgb(251,115,12)" fg:x="543044891" fg:w="18964379"/><text x="30.3909%" y="207.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (18,964,379 samples, 1.05%)</title><rect x="30.1409%" y="181" width="1.0526%" height="15" fill="rgb(240,54,50)" fg:x="543044891" fg:w="18964379"/><text x="30.3909%" y="191.50"></text></g><g><title>test::run_test::_{{closure}} (18,964,379 samples, 1.05%)</title><rect x="30.1409%" y="165" width="1.0526%" height="15" fill="rgb(233,84,52)" fg:x="543044891" fg:w="18964379"/><text x="30.3909%" y="175.50"></text></g><g><title>test::__rust_begin_short_backtrace (18,964,379 samples, 1.05%)</title><rect x="30.1409%" y="149" width="1.0526%" height="15" fill="rgb(207,117,47)" fg:x="543044891" fg:w="18964379"/><text x="30.3909%" y="159.50"></text></g><g><title>core::ops::function::FnOnce::call_once (18,964,379 samples, 1.05%)</title><rect x="30.1409%" y="133" width="1.0526%" height="15" fill="rgb(249,43,39)" fg:x="543044891" fg:w="18964379"/><text x="30.3909%" y="143.50"></text></g><g><title>alphametics::solve (18,964,379 samples, 1.05%)</title><rect x="30.1409%" y="117" width="1.0526%" height="15" fill="rgb(209,38,44)" fg:x="543044891" fg:w="18964379"/><text x="30.3909%" y="127.50"></text></g><g><title>&lt;itertools::permutations::Permutations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,323,795 samples, 0.35%)</title><rect x="30.8425%" y="101" width="0.3510%" height="15" fill="rgb(236,212,23)" fg:x="555685475" fg:w="6323795"/><text x="31.0925%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6,323,795 samples, 0.35%)</title><rect x="30.8425%" y="85" width="0.3510%" height="15" fill="rgb(242,79,21)" fg:x="555685475" fg:w="6323795"/><text x="31.0925%" y="95.50"></text></g><g><title>__GI___libc_malloc (2,948,851 samples, 0.16%)</title><rect x="31.0299%" y="69" width="0.1637%" height="15" fill="rgb(211,96,35)" fg:x="559060419" fg:w="2948851"/><text x="31.2799%" y="79.50"></text></g><g><title>__GI___libc_malloc (81,942,912 samples, 4.55%)</title><rect x="60.1284%" y="69" width="4.5481%" height="15" fill="rgb(253,215,40)" fg:x="1083324656" fg:w="81942912"/><text x="60.3784%" y="79.50">__GI_..</text></g><g><title>tcache_get (25,893,410 samples, 1.44%)</title><rect x="63.2393%" y="53" width="1.4372%" height="15" fill="rgb(211,81,21)" fg:x="1139374158" fg:w="25893410"/><text x="63.4893%" y="63.50"></text></g><g><title>tcache_get_n (25,893,410 samples, 1.44%)</title><rect x="63.2393%" y="37" width="1.4372%" height="15" fill="rgb(208,190,38)" fg:x="1139374158" fg:w="25893410"/><text x="63.4893%" y="47.50"></text></g><g><title>__rdl_alloc (4,036,117 samples, 0.22%)</title><rect x="64.6765%" y="69" width="0.2240%" height="15" fill="rgb(235,213,38)" fg:x="1165267568" fg:w="4036117"/><text x="64.9265%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (307,875,269 samples, 17.09%)</title><rect x="48.2577%" y="85" width="17.0882%" height="15" fill="rgb(237,122,38)" fg:x="869451245" fg:w="307875269"/><text x="48.5077%" y="95.50">&lt;alloc::vec::Vec&lt;T&gt; as all..</text></g><g><title>__rust_alloc (8,022,829 samples, 0.45%)</title><rect x="64.9005%" y="69" width="0.4453%" height="15" fill="rgb(244,218,35)" fg:x="1169303685" fg:w="8022829"/><text x="65.1505%" y="79.50"></text></g><g><title>&lt;itertools::permutations::Permutations&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (507,686,829 samples, 28.18%)</title><rect x="44.9975%" y="101" width="28.1784%" height="15" fill="rgb(240,68,47)" fg:x="810713688" fg:w="507686829"/><text x="45.2475%" y="111.50">&lt;itertools::permutations::Permutations&lt;I&gt; as ..</text></g><g><title>itertools::permutations::advance (141,074,003 samples, 7.83%)</title><rect x="65.3458%" y="85" width="7.8301%" height="15" fill="rgb(210,16,53)" fg:x="1177326514" fg:w="141074003"/><text x="65.5958%" y="95.50">itertools::..</text></g><g><title>[unknown] (3,971,614 samples, 0.22%)</title><rect x="73.1759%" y="101" width="0.2204%" height="15" fill="rgb(235,124,12)" fg:x="1318400517" fg:w="3971614"/><text x="73.4259%" y="111.50"></text></g><g><title>_int_free (48,307,682 samples, 2.68%)</title><rect x="75.7998%" y="85" width="2.6812%" height="15" fill="rgb(224,169,11)" fg:x="1365673509" fg:w="48307682"/><text x="76.0498%" y="95.50">_i..</text></g><g><title>tcache_put (11,842,987 samples, 0.66%)</title><rect x="77.8237%" y="69" width="0.6573%" height="15" fill="rgb(250,166,2)" fg:x="1402138204" fg:w="11842987"/><text x="78.0737%" y="79.50"></text></g><g><title>__GI___libc_free (95,632,684 samples, 5.31%)</title><rect x="73.3964%" y="101" width="5.3080%" height="15" fill="rgb(242,216,29)" fg:x="1322372131" fg:w="95632684"/><text x="73.6464%" y="111.50">__GI__..</text></g><g><title>arena_for_chunk (4,023,624 samples, 0.22%)</title><rect x="78.4810%" y="85" width="0.2233%" height="15" fill="rgb(230,116,27)" fg:x="1413981191" fg:w="4023624"/><text x="78.7310%" y="95.50"></text></g><g><title>arena_for_chunk (4,023,624 samples, 0.22%)</title><rect x="78.4810%" y="69" width="0.2233%" height="15" fill="rgb(228,99,48)" fg:x="1413981191" fg:w="4023624"/><text x="78.7310%" y="79.50"></text></g><g><title>heap_for_ptr (4,023,624 samples, 0.22%)</title><rect x="78.4810%" y="53" width="0.2233%" height="15" fill="rgb(253,11,6)" fg:x="1413981191" fg:w="4023624"/><text x="78.7310%" y="63.50"></text></g><g><title>__rdl_dealloc (2,666,354 samples, 0.15%)</title><rect x="78.7043%" y="101" width="0.1480%" height="15" fill="rgb(247,143,39)" fg:x="1418004815" fg:w="2666354"/><text x="78.9543%" y="111.50"></text></g><g><title>__rust_dealloc (11,868,821 samples, 0.66%)</title><rect x="78.8523%" y="101" width="0.6588%" height="15" fill="rgb(236,97,10)" fg:x="1420671169" fg:w="11868821"/><text x="79.1023%" y="111.50"></text></g><g><title>puzzle_with_ten (1,239,365,205 samples, 68.79%)</title><rect x="31.1935%" y="261" width="68.7892%" height="15" fill="rgb(233,208,19)" fg:x="562009270" fg:w="1239365205"/><text x="31.4435%" y="271.50">puzzle_with_ten</text></g><g><title>clone3 (1,239,365,205 samples, 68.79%)</title><rect x="31.1935%" y="245" width="68.7892%" height="15" fill="rgb(216,164,2)" fg:x="562009270" fg:w="1239365205"/><text x="31.4435%" y="255.50">clone3</text></g><g><title>start_thread (1,239,365,205 samples, 68.79%)</title><rect x="31.1935%" y="229" width="68.7892%" height="15" fill="rgb(220,129,5)" fg:x="562009270" fg:w="1239365205"/><text x="31.4435%" y="239.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1,239,365,205 samples, 68.79%)</title><rect x="31.1935%" y="213" width="68.7892%" height="15" fill="rgb(242,17,10)" fg:x="562009270" fg:w="1239365205"/><text x="31.4435%" y="223.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,239,365,205 samples, 68.79%)</title><rect x="31.1935%" y="197" width="68.7892%" height="15" fill="rgb(242,107,0)" fg:x="562009270" fg:w="1239365205"/><text x="31.4435%" y="207.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,239,365,205 samples, 68.79%)</title><rect x="31.1935%" y="181" width="68.7892%" height="15" fill="rgb(251,28,31)" fg:x="562009270" fg:w="1239365205"/><text x="31.4435%" y="191.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::_{{closure}} (1,239,365,205 samples, 68.79%)</title><rect x="31.1935%" y="165" width="68.7892%" height="15" fill="rgb(233,223,10)" fg:x="562009270" fg:w="1239365205"/><text x="31.4435%" y="175.50">test::run_test::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (1,239,365,205 samples, 68.79%)</title><rect x="31.1935%" y="149" width="68.7892%" height="15" fill="rgb(215,21,27)" fg:x="562009270" fg:w="1239365205"/><text x="31.4435%" y="159.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,239,365,205 samples, 68.79%)</title><rect x="31.1935%" y="133" width="68.7892%" height="15" fill="rgb(232,23,21)" fg:x="562009270" fg:w="1239365205"/><text x="31.4435%" y="143.50">core::ops::function::FnOnce::call_once</text></g><g><title>alphametics::solve (1,239,365,205 samples, 68.79%)</title><rect x="31.1935%" y="117" width="68.7892%" height="15" fill="rgb(244,5,23)" fg:x="562009270" fg:w="1239365205"/><text x="31.4435%" y="127.50">alphametics::solve</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (368,785,732 samples, 20.47%)</title><rect x="79.5138%" y="101" width="20.4689%" height="15" fill="rgb(226,81,46)" fg:x="1432588743" fg:w="368785732"/><text x="79.7638%" y="111.50">hashbrown::raw::RawIterRange&lt;T&gt;:..</text></g><g><title>puzzle_with_two (239,849 samples, 0.01%)</title><rect x="99.9860%" y="261" width="0.0133%" height="15" fill="rgb(247,70,30)" fg:x="1801433094" fg:w="239849"/><text x="100.2360%" y="271.50"></text></g><g><title>clone3 (239,849 samples, 0.01%)</title><rect x="99.9860%" y="245" width="0.0133%" height="15" fill="rgb(212,68,19)" fg:x="1801433094" fg:w="239849"/><text x="100.2360%" y="255.50"></text></g><g><title>start_thread (239,849 samples, 0.01%)</title><rect x="99.9860%" y="229" width="0.0133%" height="15" fill="rgb(240,187,13)" fg:x="1801433094" fg:w="239849"/><text x="100.2360%" y="239.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (239,849 samples, 0.01%)</title><rect x="99.9860%" y="213" width="0.0133%" height="15" fill="rgb(223,113,26)" fg:x="1801433094" fg:w="239849"/><text x="100.2360%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (239,849 samples, 0.01%)</title><rect x="99.9860%" y="197" width="0.0133%" height="15" fill="rgb(206,192,2)" fg:x="1801433094" fg:w="239849"/><text x="100.2360%" y="207.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (239,849 samples, 0.01%)</title><rect x="99.9860%" y="181" width="0.0133%" height="15" fill="rgb(241,108,4)" fg:x="1801433094" fg:w="239849"/><text x="100.2360%" y="191.50"></text></g><g><title>test::run_test::_{{closure}} (239,849 samples, 0.01%)</title><rect x="99.9860%" y="165" width="0.0133%" height="15" fill="rgb(247,173,49)" fg:x="1801433094" fg:w="239849"/><text x="100.2360%" y="175.50"></text></g><g><title>test::__rust_begin_short_backtrace (239,849 samples, 0.01%)</title><rect x="99.9860%" y="149" width="0.0133%" height="15" fill="rgb(224,114,35)" fg:x="1801433094" fg:w="239849"/><text x="100.2360%" y="159.50"></text></g><g><title>core::ops::function::FnOnce::call_once (239,849 samples, 0.01%)</title><rect x="99.9860%" y="133" width="0.0133%" height="15" fill="rgb(245,159,27)" fg:x="1801433094" fg:w="239849"/><text x="100.2360%" y="143.50"></text></g><g><title>alphametics::solve (239,849 samples, 0.01%)</title><rect x="99.9860%" y="117" width="0.0133%" height="15" fill="rgb(245,172,44)" fg:x="1801433094" fg:w="239849"/><text x="100.2360%" y="127.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (191,814 samples, 0.01%)</title><rect x="99.9886%" y="101" width="0.0106%" height="15" fill="rgb(236,23,11)" fg:x="1801481129" fg:w="191814"/><text x="100.2386%" y="111.50"></text></g><g><title>all (1,801,685,745 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="1801685745"/><text x="0.2500%" y="287.50"></text></g></svg></svg>